---
- name: Verify
  hosts: instance
  become: true
  become_user: aleph
  tasks:
    - name: Check if ssh command exists
      ansible.builtin.command:
        cmd: "ssh -V"
      register: ssh_command_check
      ignore_errors: yes
      changed_when: false

    - name: Assert ssh command exists
      ansible.builtin.assert:
        that:
          - ssh_command_check.rc == 0
        fail_msg: "SSH command not found. Ensure the SSH client is installed."

    - name: Check if .ssh directory exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh"
      register: ssh_dir

    - name: Assert .ssh directory exists
      ansible.builtin.assert:
        that:
          - ssh_dir.stat.exists

    - name: Check if SSH private key exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      register: ssh_private_key

    - name: Assert SSH private key exists
      ansible.builtin.assert:
        that:
          - ssh_private_key.stat.exists

    - name: Check if SSH public key exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
      register: ssh_public_key

    - name: Assert SSH public key exists
      ansible.builtin.assert:
        that:
          - ssh_public_key.stat.exists

    - name: Debug content of SSH public key
      ansible.builtin.shell: cat "{{ ansible_env.HOME }}/.ssh/authorized_keys"
      register: public_key_content
      no_log: false

    - name: Show public key content
      ansible.builtin.debug:
        var: public_key_content.stdout

    - name: Check if SSH agent environment file exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/ssh-agent-env"
      register: ssh_agent_env_file

    - name: Assert SSH agent environment file exists
      ansible.builtin.assert:
        that:
          - ssh_agent_env_file.stat.exists
        fail_msg: "SSH agent environment file not found"

    - name: Check if SSH config file exists
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh/config"
      register: ssh_config_file

    - name: Assert SSH config file exists
      ansible.builtin.assert:
        that:
          - ssh_config_file.stat.exists
        fail_msg: "SSH config file not found"

    - name: Check SSH agent auto-start in .bashrc
      ansible.builtin.shell: grep -q "SSH Agent auto-start" "{{ ansible_env.HOME }}/.bashrc"
      register: bashrc_check
      ignore_errors: yes

    - name: Assert SSH agent auto-start is configured in .bashrc
      ansible.builtin.assert:
        that:
          - bashrc_check.rc == 0
        fail_msg: "SSH agent auto-start not configured in .bashrc"

    - name: Source SSH agent environment and check if agent is running
      ansible.builtin.shell: |
        source {{ ansible_env.HOME }}/.ssh/ssh-agent-env
        if [ -n "$SSH_AGENT_PID" ] && kill -0 "$SSH_AGENT_PID" 2>/dev/null; then
          echo "agent_running"
        else
          echo "agent_not_running"
        fi
      register: agent_status

    - name: Debug agent status
      ansible.builtin.debug:
        var: agent_status.stdout

    - name: Test SSH connection to GitHub
      # This WILL fail, github has no shell access
      ansible.builtin.shell: |
        source {{ ansible_env.HOME }}/.ssh/ssh-agent-env
        ssh -T git@github.com
      register: ssh_test_output
      ignore_errors: yes
    
    - name: Debug SSH output
      debug:
        var: ssh_test_output

    - name: Assert SSH connection to GitHub was successful
      ansible.builtin.assert:
        that:
          - "'successfully authenticated' in ssh_test_output.stderr"
        fail_msg: "SSH connection to GitHub failed. Ensure the SSH key is added to your GitHub account and try again."
        success_msg: "SSH connection to GitHub was successful."

    # SSH Server verification tasks
    - name: Check if SSH server is installed
      ansible.builtin.command:
        cmd: "dpkg -l openssh-server"
      register: ssh_server_package
      ignore_errors: yes
      changed_when: false
      become: true
      become_user: root

    - name: Assert SSH server is installed
      ansible.builtin.assert:
        that:
          - ssh_server_package.rc == 0
        fail_msg: "SSH server package not installed"
        success_msg: "SSH server package is installed"

    - name: Check if SSH service is running
      ansible.builtin.systemd:
        name: ssh
      register: ssh_service_status
      become: true
      become_user: root
      tags:
        - molecule-notest  # Skip in Docker (no systemd)

    - name: Assert SSH service is running and enabled
      ansible.builtin.assert:
        that:
          - ssh_service_status.status.ActiveState == "active"
          - ssh_service_status.status.UnitFileState == "enabled"
        fail_msg: "SSH service is not running or not enabled"
        success_msg: "SSH service is running and enabled"
      tags:
        - molecule-notest  # Skip in Docker (service not running)

    - name: Check if SSH port is listening
      ansible.builtin.shell: "ss -tlnp | grep :22"
      register: ssh_port_check
      ignore_errors: yes
      changed_when: false
      become: true
      become_user: root
      tags:
        - molecule-notest  # Skip in Docker (service not running)

    - name: Assert SSH port is listening
      ansible.builtin.assert:
        that:
          - ssh_port_check.rc == 0
        fail_msg: "SSH port 22 is not listening"
        success_msg: "SSH port 22 is listening"
      tags:
        - molecule-notest  # Skip in Docker (service not running)

    - name: Check SSH server configuration
      ansible.builtin.shell: "sshd -t"
      register: sshd_config_test
      ignore_errors: yes
      changed_when: false
      become: true
      become_user: root
      tags:
        - molecule-notest  # Skip in Docker (missing /run/sshd directory)

    - name: Assert SSH server configuration is valid
      ansible.builtin.assert:
        that:
          - sshd_config_test.rc == 0
        fail_msg: "SSH server configuration is invalid"
        success_msg: "SSH server configuration is valid"
      tags:
        - molecule-notest  # Skip in Docker

    - name: Verify SSH server configuration values
      ansible.builtin.shell: "grep -E '^(PermitRootLogin|PubkeyAuthentication|PasswordAuthentication|X11Forwarding|ClientAliveInterval|ClientAliveCountMax)' /etc/ssh/sshd_config"
      register: sshd_config_values
      changed_when: false
      become: true
      become_user: root

    - name: Display SSH server configuration
      ansible.builtin.debug:
        var: sshd_config_values.stdout_lines
