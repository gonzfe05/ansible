---
- name: Get current user
  ansible.builtin.command: whoami
  register: current_user
  changed_when: false
  
- name: Get current shell
  ansible.builtin.command:
    argv:
      - sh
      - -c
      - "getent passwd {{ current_user.stdout }} | cut -d: -f7"
  register: current_shell
  changed_when: false

- name: Debug ansible_user variable
  debug:
    msg: "The value of current_user.stdout is: {{ current_user.stdout }}"

- name: Change default shell to Zsh
  when: current_shell.stdout.strip() != '/bin/zsh'
  ansible.builtin.command:
    cmd: chsh -s /bin/zsh {{ current_user.stdout }}
  register: change_shell
  changed_when: change_shell.rc == 0

- name: Verify shell change
  ansible.builtin.command:
    argv:
      - sh
      - -c
      - "getent passwd {{ current_user.stdout }} | cut -d: -f7"
  register: shell_output
  changed_when: false

- name: Assert Zsh is the default shell
  ansible.builtin.assert:
    that:
      - shell_output.stdout.strip() == '/bin/zsh'
    msg: "The shell change to Zsh failed"

- name: Debug ansible_env.HOME variable
  debug:
    msg: "The value of ansible_env.HOME is: {{ ansible_env.HOME }}"

- name: Check that the .oh-my-zsh directory exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.oh-my-zsh"
  register: oh_my_stats

- name: Install Oh-My-Zsh
  when: not oh_my_stats.stat.exists
  block:
    - name: Download Oh-My-Zsh installer script
      ansible.builtin.get_url:
        url: https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh
        dest: "{{ ansible_env.HOME }}/.oh-my-installer"
        mode: '0755'

    - name: Run Oh-My-Zsh installer script
      ansible.builtin.command: "{{ ansible_env.HOME }}/.oh-my-installer"
      register: oh_my_zsh_install
      changed_when: oh_my_zsh_install.rc == 0
      environment:
        RUNZSH: 'no'
        CHSH: 'no'

- name: Check if zsh-autosuggestions is installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/zsh-autosuggestions"
  register: zsh_autosuggestions_stats

- name: Install zsh-autosuggestions
  when: not zsh_autosuggestions_stats.stat.exists
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-autosuggestions.git'
    dest: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/zsh-autosuggestions"
    version: master

- name: Check if zsh-autoenv is installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autoenv"
  register: zsh_autoenv_stats

- name: Install zsh-autoenv
  when: not zsh_autoenv_stats.stat.exists
  ansible.builtin.git:
    repo: 'https://github.com/Tarrasch/zsh-autoenv.git'
    dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autoenv"
    version: master

- name: Check if .zshrc exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.zshrc"
  register: zshrc_stat

- name: Configure zsh-autoenv in .zshrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    block: |
      # Enable zsh-autoenv plugin for automatic .env file loading
      source {{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autoenv/autoenv.zsh
      
      # zsh-autoenv settings
      export AUTOENV_FILE_ENTER=.env
      export AUTOENV_FILE_LEAVE=.env.leave
      export AUTOENV_LOOK_UPWARDS=1
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ZSH AUTOENV"
    create: yes
  when: zshrc_stat.stat.exists

- name: Configure Vim clipboard integration in .vimrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.vimrc"
    block: |
      " Enable system clipboard integration
      " This allows yanking with 'y' to copy to system clipboard
      " and pasting with 'p' to paste from system clipboard
      set clipboard=unnamedplus
      
      " Ensure we're using vim-gtk or similar with +clipboard support
      if has('clipboard')
        " Explicit mappings for system clipboard
        vnoremap <C-c> "+y
        vnoremap <C-x> "+x
        nnoremap <C-v> "+p
        inoremap <C-v> <C-r>+
      endif
    marker: '" {mark} ANSIBLE MANAGED BLOCK - CLIPBOARD'
    create: yes

- name: Configure Neovim clipboard integration if init.vim exists
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
    block: |
      " Enable system clipboard integration
      set clipboard=unnamedplus
      
      " Neovim automatically detects clipboard providers (xclip, wl-clipboard, etc.)
    marker: '" {mark} ANSIBLE MANAGED BLOCK - CLIPBOARD'
    create: no
  ignore_errors: true