---
name: molecule

on:
  pull_request:
    paths:
      - "playbooks/roles/**"
      - "requirements.yml"
      - ".github/workflows/molecule.yml"
  push:
    branches: [ main ]
    paths:
      - "playbooks/roles/**"
      - "requirements.yml"
      - ".github/workflows/molecule.yml"
  workflow_dispatch:

jobs:
  # Lint job - separate from testing for better debugging
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core yamllint ansible-lint
          
      - name: Run yamllint
        run: |
          echo "Running yamllint..."
          yamllint . || echo "‚ö†Ô∏è yamllint found issues but continuing..."
          
      - name: Run ansible-lint on roles
        run: |
          echo "Running ansible-lint on roles..."
          find playbooks/roles -name "tasks" -type d | while read tasks_dir; do
            role_dir=$(dirname "$tasks_dir")
            role_name=$(basename "$role_dir")
            echo "Linting role: $role_name"
            ansible-lint "$role_dir" || echo "‚ö†Ô∏è ansible-lint found issues in $role_name but continuing..."
          done

  # Test job - focus on molecule testing
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: lint
    continue-on-error: false
    
    strategy:
      fail-fast: false
      matrix:
        distro: [ "ubuntu:22.04", "ubuntu:24.04" ]

    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible + Molecule
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core \
                      molecule \
                      "molecule-plugins[docker]" \
                      requests

      - name: Install Docker collection
        run: |
          ansible-galaxy collection install community.docker || echo "‚ö†Ô∏è Failed to install community.docker, continuing..."

      - name: Debug - Environment info
        run: |
          echo "=== Environment Information ==="
          echo "Python version: $(python --version)"
          echo "Ansible version: $(ansible --version | head -n1)"
          echo "Molecule version: $(molecule --version)"
          echo "Docker status: $(docker --version)"
          echo ""
          echo "Available roles with molecule:"
          find playbooks/roles -type d -name molecule | while read mol_dir; do
            role_dir=$(dirname "$mol_dir")
            role_name=$(basename "$role_dir")
            echo "  - $role_name"
          done

      - name: Select Docker image
        id: docker-image
        run: |
          case "${{ matrix.distro }}" in
            "ubuntu:24.04")
              echo "image=geerlingguy/docker-ubuntu2404-ansible" >> $GITHUB_OUTPUT
              ;;
            "ubuntu:22.04")
              echo "image=geerlingguy/docker-ubuntu2204-ansible" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "image=geerlingguy/docker-ubuntu2204-ansible" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "Selected Docker image: $(cat $GITHUB_OUTPUT | grep image= | cut -d= -f2)"

      - name: Test roles with Molecule
        env:
          DOCKER_IMAGE: ${{ steps.docker-image.outputs.image }}
        run: |
          set -e
          
          # Test roles in order of complexity (simple first)
          ROLE_ORDER=("apt_installs" "users" "python" "env_setup" "shell" "dotfiles" "ssh" "aws" "R" "astro_cli" "cuda_toolkit" "obsidian" "repos")
          
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          FAILED_ROLES=()
          
          for role_name in "${ROLE_ORDER[@]}"; do
            role_dir="playbooks/roles/$role_name"
            if [ -d "$role_dir/molecule" ]; then
              TOTAL_COUNT=$((TOTAL_COUNT + 1))
              echo ""
              echo "üß™ Testing role: $role_name ($(($SUCCESS_COUNT + 1))/$TOTAL_COUNT)"
              echo "========================================"
              
              # Update molecule config to use selected image
              if [ -f "$role_dir/molecule/default/molecule.yml" ]; then
                cp "$role_dir/molecule/default/molecule.yml" "$role_dir/molecule/default/molecule.yml.backup"
                sed -i "s|image: \".*\"|image: \"$DOCKER_IMAGE\"|" "$role_dir/molecule/default/molecule.yml"
              fi
              
              # Run molecule test
              cd "$role_dir"
              if molecule test --destroy always; then
                echo "‚úÖ Role $role_name passed"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "‚ùå Role $role_name failed"
                FAILED_ROLES+=("$role_name")
                # Restore backup
                if [ -f "molecule/default/molecule.yml.backup" ]; then
                  mv "molecule/default/molecule.yml.backup" "molecule/default/molecule.yml"
                fi
                # Continue testing other roles instead of failing immediately
              fi
              cd "$GITHUB_WORKSPACE"
            else
              echo "‚ö†Ô∏è  Skipping $role_name (no molecule directory)"
            fi
          done
          
          echo ""
          echo "üìä Test Results Summary"
          echo "======================="
          echo "‚úÖ Passed: $SUCCESS_COUNT"
          echo "‚ùå Failed: $((TOTAL_COUNT - SUCCESS_COUNT))"
          echo "üìã Total:  $TOTAL_COUNT"
          
          if [ ${#FAILED_ROLES[@]} -gt 0 ]; then
            echo ""
            echo "Failed roles:"
            for role in "${FAILED_ROLES[@]}"; do
              echo "  - $role"
            done
            echo ""
            echo "‚ùå Some roles failed testing"
            exit 1
          else
            echo ""
            echo "üéâ All roles passed testing!"
          fi